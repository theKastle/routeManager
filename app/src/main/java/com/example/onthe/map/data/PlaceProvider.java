package com.example.onthe.map.data;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

/**
 * Created by phucle on 9/8/17.
 */

public class PlaceProvider extends ContentProvider {
    public static final int CODE_PLACE = 2600;
    public static final int CODE_PLACE_ID = 2700;

    private static final UriMatcher mUriMatcher = buildUriMatcher();
    private PlaceDbHelper mDbHelper;

    public static UriMatcher buildUriMatcher() {
        final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
        final String authority = PlaceContract.CONTENT_AUTHORITY;

        matcher.addURI(authority, PlaceContract.PATH_PLACE_ID, CODE_PLACE);
        matcher.addURI(authority, PlaceContract.PATH_PLACE_ID + "/#", CODE_PLACE_ID);

        return matcher;
    }


    @Override
    public boolean onCreate() {
        mDbHelper = new PlaceDbHelper(getContext());
        return true;
    }

    /**
     * Insert multiple rows of data at a time.
     *
     * @param uri       URI of the insertion request.
     * @param values    The sets of pairs (column_name, value) were added to the database.
     * @return          The numbers of new rows were inserted.
     */
    @Override
    public int bulkInsert(@NonNull Uri uri, @NonNull ContentValues[] values) {
        final SQLiteDatabase db = mDbHelper.getWritableDatabase();
        switch (mUriMatcher.match(uri)) {
            case CODE_PLACE:
                db.beginTransaction();
                int newRow = 0;
                try {
                    for (ContentValues value : values) {
                        /**
                         * {@literal _id} is different from const COLUMN_PLACE_ID in the PetContract
                         * class. This id is auto generated by the SQL Create statement in
                         * PlaceDbHelper class.
                         */
                        long _id = db.insert(PlaceContract.PlaceEntry.TABLE_NAME, null, value);
                        if (_id != 1) {
                            ++newRow;
                        }
                    }
                    db.setTransactionSuccessful();
                } finally {
                    db.endTransaction();
                }

                if (newRow > 0) {
                    getContext().getContentResolver().notifyChange(uri, null);
                }

                return newRow;
            default:
                return super.bulkInsert(uri, values);
        }
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection,
                        @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        Cursor cursor;

        switch (mUriMatcher.match(uri)) {
            case CODE_PLACE_ID:
                String ID = uri.getLastPathSegment();

                String select = PlaceContract.PlaceEntry.COLUMN_PLACE_ID + " = ? ";
                String[] selectArgs = new String[]{ID};

                cursor = mDbHelper.getReadableDatabase().query(
                        PlaceContract.PlaceEntry.TABLE_NAME,
                        projection,
                        select,
                        selectArgs,
                        null,
                        null,
                        sortOrder);
                break;
            case CODE_PLACE:
                cursor = mDbHelper.getReadableDatabase().query(
                        PlaceContract.PlaceEntry.TABLE_NAME,
                        projection,
                        selection,
                        selectionArgs,
                        null,
                        null,
                        sortOrder);
                break;
            default:
                throw new UnsupportedOperationException("Unknown uri: " + uri);
        }

        cursor.setNotificationUri(getContext().getContentResolver(), uri);
        return cursor;
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        throw new RuntimeException("Don't need to implement this method.");
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        throw new RuntimeException("Don't need to implement this method.");
    }

    @Override
    public int delete(@NonNull Uri uri, @Nullable String selection,
                      @Nullable String[] selectionArgs) {
        int deletedRow = 0;

        /**
         * Pass '1' to delete all rows and return the number of rows that were deleted.
         */
        if (selection == null) {
            selection = "1";
        }

        switch (mUriMatcher.match(uri)) {
            case CODE_PLACE:
                deletedRow = mDbHelper.getWritableDatabase().delete(
                        PlaceContract.PlaceEntry.TABLE_NAME,
                        selection,
                        selectionArgs);
                break;
            default:
                throw new UnsupportedOperationException("Unknown uri: " + uri);
        }

        if (deletedRow != 0) {
            getContext().getContentResolver().notifyChange(uri, null);
        }

        return deletedRow;
    }

    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection,
                      @Nullable String[] selectionArgs) {
        throw new RuntimeException("Don't need to implement this method.");
    }

    @Override
    public void shutdown() {
        mDbHelper.close();
        super.shutdown();
    }
}
